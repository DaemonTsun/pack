
# pack cmake package
# defines functions for integrating pack into cmake projects

# used internally
macro(sanitize_path NAME PATH)
    string(REGEX REPLACE "[/.]" "_" ${NAME} ${PATH})
    string(REGEX REPLACE "__+" "_" ${NAME} ${${NAME}})
    string(REGEX REPLACE "^_+" "" ${NAME} ${${NAME}})
endmacro()

# used internally
macro(generate_header OUT_PATH)
    set(_OPTIONS)
    set(_SINGLE_VAL_ARGS BASE PACKAGE)
    set(_MULTI_VAL_ARGS FILES)

    cmake_parse_arguments(GENERATE_HEADER "${_OPTIONS}" "${_SINGLE_VAL_ARGS}" "${_MULTI_VAL_ARGS}" ${ARGN})

    if (NOT DEFINED GENERATE_HEADER_PACKAGE)
        message(FATAL_ERROR "generate_header: missing PACKAGE path, required to generate header file (package does not need to exist)")
    endif()

    if (NOT DEFINED GENERATE_HEADER_BASE)
        message(FATAL_ERROR "generate_header: missing BASE path")
    endif()

    cmake_path(RELATIVE_PATH GENERATE_HEADER_PACKAGE BASE_DIRECTORY "${GENERATE_HEADER_BASE}" OUTPUT_VARIABLE REL_PACKAGE)

    sanitize_path(SAFE_REL_PACKAGE "${REL_PACKAGE}")

    set(_HEADER "// this file was generated by CMake pack\n\n#pragma once\n")
    set(_HEADER "${_HEADER}\n#define ${SAFE_REL_PACKAGE} \"${REL_PACKAGE}\"\n")

    list(LENGTH GENERATE_HEADER_FILES ENTRY_COUNT)

    set(_HEADER "${_HEADER}#define ${SAFE_REL_PACKAGE}_file_count ${ENTRY_COUNT};\n")
    set(_HEADER "${_HEADER}static const char *${SAFE_REL_PACKAGE}_files[] = {\n")

    set(_HEADER_DEFS "")

    set(_I 0)
    foreach(_FILE ${ADD_PACKAGE_FILES})
        cmake_path(RELATIVE_PATH _FILE BASE_DIRECTORY "${GENERATE_HEADER_BASE}" OUTPUT_VARIABLE REL_FILE)
        sanitize_path(SAFE_FILE "${REL_FILE}")
        set(_HEADER "${_HEADER}    \"${REL_FILE}\",\n")
        set(_HEADER_DEFS "${_HEADER_DEFS}#define ${SAFE_REL_PACKAGE}__${SAFE_FILE} ${_I}\n")
        math(EXPR _I "${_I}+1")
    endforeach()

    set(_HEADER "${_HEADER}};\n\n${_HEADER_DEFS}\n")

    # TODO: write to file
    # TODO: add add_files targets instead, and call generate_header with target paths
    message("${_HEADER}")

    unset(_HEADER)
endmacro()

# TODO: docs
macro(add_package OUT_PATH)
    find_program(PACKER_EXEC packer)

    if (NOT PACKER_EXEC)
        message(FATAL_ERROR "could not find packer executable, install packer first.")
    endif()

    set(_OPTIONS)
    set(_SINGLE_VAL_ARGS BASE GEN_HEADER)
    set(_MULTI_VAL_ARGS FILES)

    cmake_parse_arguments(ADD_PACKAGE "${_OPTIONS}" "${_SINGLE_VAL_ARGS}" "${_MULTI_VAL_ARGS}" ${ARGN})

    if (NOT DEFINED ADD_PACKAGE_FILES)
        message(FATAL_ERROR "add_package: missing FILES")
    endif()

    if (NOT DEFINED ADD_PACKAGE_BASE)
        message(FATAL_ERROR "add_package: missing BASE path")
    endif()

    message(DEBUG " pack: package ${OUT_PATH}")
    message(DEBUG "       base path ${ADD_PACKAGE_BASE}")
    message(DEBUG "  files:")

    set(_INDEX "## this file was generated by CMake pack\n\n")

    foreach(_FILE ${ADD_PACKAGE_FILES})
        message(DEBUG "  ${_FILE}")
        set(_INDEX "${_INDEX}${_FILE}\n")
    endforeach()

    set(_INDEX_FILE "${OUT_PATH}_index")
    file(WRITE "${_INDEX_FILE}" "${_INDEX}")

    message(DEBUG "  command:\n" "${PACKER_EXEC} -f -b ${ADD_PACKAGE_BASE} -o ${OUT_PATH} ${_INDEX_FILE}")

    add_custom_command(
        OUTPUT "${OUT_PATH}"
        COMMAND "${PACKER_EXEC}" "-f" "-b" "${ADD_PACKAGE_BASE}" "-o" "${OUT_PATH}" "${_INDEX_FILE}"
        MAIN_DEPENDENCY "${_INDEX_FILE}"
        DEPENDS "${ADD_PACKAGE_FILES}" "${_INDEX_FILE}")

    if (DEFINED ADD_PACKAGE_GEN_HEADER)
        add_custom_command(
            OUTPUT "${ADD_PACKAGE_GEN_HEADER}"
            COMMAND "${PACKER_EXEC}" "-f" "-g" "-o" "${ADD_PACKAGE_GEN_HEADER}" "${OUT_PATH}"
            MAIN_DEPENDENCY "${OUT_PATH}"
            DEPENDS "${OUT_PATH}")
    endif()

    unset(_INDEX)
    unset(_INDEX_FILE)
endmacro()
